import asyncio
import sqlite3
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_USERNAME = "@Ferdinantik_ot777"
TON_WALLET = "UQAndbKgGhUtqSlXCA8pL_aCq0xwxtf4HVyREfwUkgCs047M"
DB_PATH = "crypto_users.db"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            referrer INTEGER,
            balance REAL DEFAULT 0.0,
            ton_wallet TEXT
        )''')
        conn.commit()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(F.text.startswith("/start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    args = message.text.split()
    referrer = int(args[1]) if len(args) > 1 and args[1].isdigit() else None

    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            cursor.execute("INSERT INTO users (id, username, referrer) VALUES (?, ?, ?)", (user_id, username, referrer))
            if referrer:
                cursor.execute("UPDATE users SET balance = balance + 0.1 WHERE id = ?", (referrer,))
            conn.commit()

    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    kb.button(text="üìù –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")
    kb.button(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data="ref")
    kb.button(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw")

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{username}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>CryptoWorkBot</b> üíº\n\n"
        "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π <b>TON</b>!\n",
        reply_markup=kb.as_markup()
    )

# --- –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ ---
@dp.callback_query(F.data == "balance")
async def balance_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        balance = result[0] if result else 0.0
    await callback.message.edit_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} TON</b>")

# --- –ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ---
@dp.callback_query(F.data == "ref")
async def ref_callback(callback: types.CallbackQuery):
    uid = callback.from_user.id
    link = f"https://t.me/CryptoWorkBot?start={uid}"
    await callback.message.edit_text(f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π <b>0.1 TON</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\nüîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n<code>{link}</code>")

# --- –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ ---
@dp.callback_query(F.data == "withdraw")
async def withdraw_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(f"üö´ –í—ã–≤–æ–¥ –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º: {ADMIN_USERNAME}")

# --- –ü–æ–∫–∞–∑ –∑–∞–¥–∞–Ω–∏–π ---
@dp.callback_query(F.data == "tasks")
async def tasks_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("üìã –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
