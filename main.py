import asyncio
import logging
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render ‚Üí Environment ‚Üí BOT_TOKEN)
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Render ‚Üí Environment.")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–∫—É–ø–æ–∫ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
purchases = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –º–∞–≥–∞–∑–∏–Ω–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://cryptoworkbot-shop.onrender.com"))]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoWorkBot.\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å VIP –∏ –ë—É—Å—Ç–µ—Ä—ã –∑–∞ Telegram Stars ‚≠ê",
        reply_markup=main_kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp: {data}")  # –ø–∏—à–µ–º –≤ –ª–æ–≥–∏ Render

        if data.get("action") == "buy":
            product = data.get("product")

            if product == "vip":
                purchases.setdefault(message.from_user.id, []).append("vip")
                await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üåü –í—ã –∫—É–ø–∏–ª–∏ VIP –∑–∞ 20 Stars.")
            elif product == "booster":
                purchases.setdefault(message.from_user.id, []).append("booster")
                await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! üöÄ –í—ã –∫—É–ø–∏–ª–∏ –ë—É—Å—Ç–µ—Ä –∑–∞ 10 Stars.")
            else:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")

        else:
            await message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ web_app_data: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    logging.info("‚úÖ Bot is running!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
