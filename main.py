import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import WebAppInfo

# ==============================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================
TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ Render
BOT_USERNAME = "MenqenqmersareryBot"

bot = Bot(token=TOKEN)
dp = Dispatcher()

balances = {}
referrals = {}
purchases = {}

# URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
MINI_APP_URL = "https://cryptoworkbot-shop.onrender.com"

# ==============================
# –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER
# ==============================
async def handle(request):
    return web.Response(text="‚úÖ Bot is running!")

async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle)
    port = int(os.getenv("PORT", 10000))  # Render —Ç—Ä–µ–±—É–µ—Ç PORT
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()


# ==============================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ==============================
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    kb.button(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")
    kb.button(text="üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="invite")
    
    # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    kb.button(text="üõí –ú–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=MINI_APP_URL)) 
    
    kb.button(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw")
    kb.adjust(2)
    return kb.as_markup()


# ==============================
# –°–¢–ê–†–¢
# ==============================
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()

    if user_id not in balances:
        balances[user_id] = 0.0
        referrals[user_id] = []
        purchases[user_id] = []

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if len(args) > 1:
        inviter_id = int(args[1])
        if inviter_id != user_id and user_id not in referrals.get(inviter_id, []):
            referrals[inviter_id].append(user_id)
            balances[inviter_id] += 0.1

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoWorkBot üíº\n\n"
        f"–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π TON!",
        reply_markup=main_menu()
    )


# ==============================
# –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ
# ==============================
@dp.callback_query(F.data == "balance")
async def balance_callback(callback: types.CallbackQuery):
    bal = balances.get(callback.from_user.id, 0.0)
    await callback.message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal} TON")
    await callback.answer()


@dp.callback_query(F.data == "tasks")
async def tasks_callback(callback: types.CallbackQuery):
    await callback.message.answer("üìã –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    await callback.answer()


@dp.callback_query(F.data == "invite")
async def invite_callback(callback: types.CallbackQuery):
    referral_link = f"https://t.me/{BOT_USERNAME}?start={callback.from_user.id}"
    count = len(referrals.get(callback.from_user.id, []))
    await callback.message.answer(
        f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π 0.1 TON –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
        f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {count} —á–µ–ª."
    )
    await callback.answer()


@dp.callback_query(F.data == "withdraw")
async def withdraw_callback(callback: types.CallbackQuery):
    await callback.message.answer("üí∏ –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    await callback.answer()


# ==============================
# –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô
# ==============================
@dp.message(F.content_type == "successful_payment")
async def successful_payment(message: types.Message):
    payment = message.successful_payment
    user_id = message.from_user.id

    if payment.invoice_payload == "booster_1":
        purchases[user_id].append("booster")
        await message.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! üöÄ –î–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω x1.5")

    elif payment.invoice_payload == "vip_1":
        purchases[user_id].append("vip")
        await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üåü –í—ã –ø–æ–ª—É—á–∏–ª–∏ VIP-–¥–æ—Å—Ç—É–ø")


# ==============================
# MAIN
# ==============================
async def main():
    await start_webserver()   # —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
