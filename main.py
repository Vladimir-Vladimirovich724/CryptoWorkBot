import os
import asyncio
import json
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import WebAppInfo

# ==============================
# –ù–ê–°–¢–†–û–ô–ö–ò. –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
# ==============================
# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
TOKEN = os.getenv("BOT_TOKEN")  

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Render)
BOT_USERNAME = os.getenv("BOT_USERNAME", "MenqenqmersareryBot")
MY_ID = int(os.getenv("MY_ID", "7352855554")) 
MINI_APP_URL = os.getenv("MINI_APP_URL", "https://cryptoworkbot-shop.onrender.com")

# –¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
PRODUCT_PRICES = {
    "vip": 20.0,
    "booster": 10.0,
}
REFERRAL_PERCENT = 0.05

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "data.json"

# ==============================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• (JSON)
# ==============================
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    if os.path.exists(DB_FILE):
        with open(DB_FILE, "r") as f:
            return json.load(f)
    return {
        "balances": {},
        "referrals": {},
        "purchases": {},
    }

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª."""
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=4)

# ==============================
# –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER
# ==============================
async def handle(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL, —á—Ç–æ–±—ã Render –∑–Ω–∞–ª, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    return web.Response(text="‚úÖ Bot is running!")

async def start_webserver():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä."""
    app = web.Application()
    app.router.add_get("/", handle)
    port = int(os.getenv("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

# ==============================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ==============================
def main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    kb.button(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")
    kb.button(text="üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="invite")
    kb.button(text="üõí –ú–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=MINI_APP_URL))
    kb.button(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw")
    kb.adjust(2)
    return kb.as_markup()

# ==============================
# –°–¢–ê–†–¢
# ==============================
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏.
    """
    user_id = str(message.from_user.id)
    args = message.text.split()
    
    data = load_data()

    if user_id not in data["balances"]:
        data["balances"][user_id] = 0.0
        data["referrals"][user_id] = []
        data["purchases"][user_id] = []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(args) > 1:
        try:
            inviter_id = str(int(args[1]))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Å–∞–º —Å–µ–±—è
            if inviter_id != user_id and user_id not in data["referrals"].get(inviter_id, []):
                data["referrals"].setdefault(inviter_id, []).append(user_id)
        except (ValueError, TypeError):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –≤ —Å—Å—ã–ª–∫–µ
            pass
    
    save_data(data)

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoWorkBot üíº\n\n"
        f"–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π TON!",
        reply_markup=main_menu()
    )

# ==============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ú–ï–ù–Æ
# ==============================
@dp.callback_query(F.data == "balance")
async def balance_callback(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_data()
    user_id = str(callback.from_user.id)
    bal = data["balances"].get(user_id, 0.0)
    await callback.message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal} TON")
    await callback.answer()

@dp.callback_query(F.data == "tasks")
async def tasks_callback(callback: types.CallbackQuery):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏—è—Ö."""
    await callback.message.answer("üìã –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    await callback.answer()

@dp.callback_query(F.data == "invite")
async def invite_callback(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö."""
    user_id = str(callback.from_user.id)
    referral_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
    data = load_data()
    count = len(data["referrals"].get(user_id, []))
    await callback.message.answer(
        f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π {REFERRAL_PERCENT*100}% –æ—Ç –∏—Ö –ø–æ–∫—É–ø–æ–∫!\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
        f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {count} —á–µ–ª."
    )
    await callback.answer()

@dp.callback_query(F.data == "withdraw")
async def withdraw_callback(callback: types.CallbackQuery):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤."""
    await callback.message.answer("üí∏ –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    await callback.answer()

# ==============================
# –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó WEBAPP –ò –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ö–£–ü–ö–ò
# ==============================
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    user_id = str(message.from_user.id)
    try:
        data = json.loads(message.web_app_data.data)
        if data["action"] == "buy":
            product = data["product"]
            price = PRODUCT_PRICES.get(product)
            
            if not price:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")
                return

            db_data = load_data()
            user_balance = db_data["balances"].get(user_id, 0.0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
            if user_balance >= price:
                db_data["balances"][user_id] -= price
                db_data["purchases"].setdefault(user_id, []).append(product)
                
                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
                for inviter_id, invited_users in db_data["referrals"].items():
                    if user_id in invited_users:
                        referral_bonus = price * REFERRAL_PERCENT
                        db_data["balances"].setdefault(inviter_id, 0.0)
                        db_data["balances"][inviter_id] += referral_bonus
                        await bot.send_message(
                            int(inviter_id),
                            f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∫—É–ø–∏–ª {product}! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {referral_bonus} TON."
                        )
                
                save_data(db_data)
                await message.answer(f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ {product} –∑–∞ {price} Stars.")
            else:
                await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
                
    except (json.JSONDecodeError, KeyError) as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

# ==============================
# –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
# ==============================
@dp.message(F.text.startswith('/add_ton'))
async def add_ton_to_balance(message: types.Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.from_user.id != MY_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        args = message.text.split()
        amount = float(args[1])
        user_id = str(int(args[2]))
        
        db_data = load_data()
        db_data["balances"].setdefault(user_id, 0.0)
        db_data["balances"][user_id] += amount
        save_data(db_data)
        
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} TON.")
        await bot.send_message(int(user_id), f"üéâ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} TON!")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_ton <—Å—É–º–º–∞> <ID>")

# ==============================
# MAIN
# ==============================
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    await start_webserver()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
