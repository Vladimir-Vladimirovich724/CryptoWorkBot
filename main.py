import os
import asyncio
import json
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import WebAppInfo

# ==============================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================
TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ Render –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_USERNAME = "MenqenqmersareryBot"
MY_ID = 7352855554   # —Ç–≤–æ–π ID –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
REFERRAL_PERCENT = 0.05  

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞" –≤ –ø–∞–º—è—Ç–∏ (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
balances = {}
referrals = {}
purchases = {}

# URL —Ç–≤–æ–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
MINI_APP_URL = "https://cryptoworkbot-shop.onrender.com"

# ==============================
# –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER
# ==============================
async def handle(request):
    return web.Response(text="‚úÖ Bot is running!")

async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle)
    port = int(os.getenv("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

# ==============================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ==============================
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    kb.button(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")
    kb.button(text="üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="invite")
    kb.button(text="üõí –ú–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=MINI_APP_URL))
    kb.button(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw")
    kb.adjust(2)
    return kb.as_markup()

# ==============================
# –°–¢–ê–†–¢
# ==============================
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()

    if user_id not in balances:
        balances[user_id] = 0.0
        referrals[user_id] = []
        purchases[user_id] = []

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if len(args) > 1:
        try:
            inviter_id = int(args[1])
            if inviter_id != user_id and user_id not in referrals.get(inviter_id, []):
                referrals.setdefault(inviter_id, []).append(user_id)
        except Exception:
            pass

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoWorkBot üíº\n\n"
        f"–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π TON!",
        reply_markup=main_menu()
    )

# ==============================
# –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ
# ==============================
@dp.callback_query(F.data == "balance")
async def balance_callback(callback: types.CallbackQuery):
    bal = balances.get(callback.from_user.id, 0.0)
    await callback.message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal} TON")
    await callback.answer()

@dp.callback_query(F.data == "tasks")
async def tasks_callback(callback: types.CallbackQuery):
    await callback.message.answer("üìã –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    await callback.answer()

@dp.callback_query(F.data == "invite")
async def invite_callback(callback: types.CallbackQuery):
    referral_link = f"https://t.me/{BOT_USERNAME}?start={callback.from_user.id}"
    count = len(referrals.get(callback.from_user.id, []))
    await callback.message.answer(
        f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π 5% –æ—Ç –∏—Ö –ø–æ–∫—É–ø–æ–∫!\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
        f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {count} —á–µ–ª."
    )
    await callback.answer()

@dp.callback_query(F.data == "withdraw")
async def withdraw_callback(callback: types.CallbackQuery):
    await callback.message.answer("üí∏ –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    await callback.answer()

# ==============================
# –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó WEBAPP
# ==============================
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        if data["action"] == "buy":
            product = data["product"]
            if product == "vip":
                purchases.setdefault(message.from_user.id, []).append("vip")
                await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üåü –í—ã –∫—É–ø–∏–ª–∏ VIP –∑–∞ 20 Stars.")
            elif product == "booster":
                purchases.setdefault(message.from_user.id, []).append("booster")
                await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! üöÄ –í—ã –∫—É–ø–∏–ª–∏ –ë—É—Å—Ç–µ—Ä –∑–∞ 10 Stars.")
            else:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: {e}")

# ==============================
# –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–ê
# ==============================
@dp.message(F.text.startswith('/add_ton'))
async def add_ton_to_balance(message: types.Message):
    if message.from_user.id != MY_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        args = message.text.split()
        amount = float(args[1])
        user_id = int(args[2])
        balances.setdefault(user_id, 0.0)
        balances[user_id] += amount
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} TON.")
        await bot.send_message(user_id, f"üéâ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} TON!")
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_ton <—Å—É–º–º–∞> <ID>")

# ==============================
# MAIN
# ==============================
async def main():
    await start_webserver()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
