import os
import asyncio
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web

# === –ö–æ–Ω—Ñ–∏–≥ ===
TOKEN = os.getenv("BOT_TOKEN")  # –≤ Render: Settings ‚Üí Environment ‚Üí Environment Variables
BOT_USERNAME = "MenqenqmersareryBot"  # –±–µ–∑ @
ADMIN_USERNAME = "Ferdinantik_ot777"  # –±–µ–∑ @, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–æ–º –±—ã–ª –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç

DB_PATH = "bot.db"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def db():
    return sqlite3.connect(DB_PATH)

def init_db():
    with db() as conn:
        c = conn.cursor()
        c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            balance REAL DEFAULT 0.0,
            referrer INTEGER
        )""")
        c.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            url TEXT,
            reward REAL NOT NULL,
            active INTEGER DEFAULT 1
        )""")
        c.execute("""
        CREATE TABLE IF NOT EXISTS task_completions (
            user_id INTEGER,
            task_id INTEGER,
            completed_at TEXT,
            PRIMARY KEY (user_id, task_id)
        )""")
        conn.commit()

# === –£—Ç–∏–ª–∏—Ç—ã ===
def is_admin(message: types.Message | types.CallbackQuery) -> bool:
    u = message.from_user if isinstance(message, types.CallbackQuery) else message.from_user
    return (u.username or "").lower() == ADMIN_USERNAME.lower()

def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    kb.button(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")
    kb.button(text="üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="invite")
    kb.button(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw")
    kb.adjust(2)
    return kb.as_markup()

def admin_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_addtask_help")
    kb.button(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_listtasks")
    kb.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast_help")
    kb.adjust(1)
    return kb.as_markup()

# === –ö–æ–º–∞–Ω–¥–∞ /start + —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ ===
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    init_db()  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    user_id = message.from_user.id
    username = message.from_user.username or "no_username"

    # —Ä–∞–∑–±–æ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    parts = message.text.split()
    referrer = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else None

    with db() as conn:
        c = conn.cursor()
        c.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        exists = c.fetchone()
        if not exists:
            c.execute("INSERT INTO users (id, username, balance, referrer) VALUES (?, ?, 0.0, ?)",
                      (user_id, username, referrer))
            # –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—é
            if referrer and referrer != user_id:
                c.execute("UPDATE users SET balance = balance + 0.1 WHERE id = ?", (referrer,))
        else:
            c.execute("UPDATE users SET username = ? WHERE id = ?", (username, user_id))
        conn.commit()

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>CryptoWorkBot</b> üíº\n\n"
        f"–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π <b>TON</b>!",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

# === –ë–∞–ª–∞–Ω—Å ===
@dp.callback_query(F.data == "balance")
async def on_balance(cb: types.CallbackQuery):
    with db() as conn:
        c = conn.cursor()
        c.execute("SELECT balance FROM users WHERE id = ?", (cb.from_user.id,))
        row = c.fetchone()
        bal = row[0] if row else 0.0
    await cb.message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{bal:.2f} TON</b>", parse_mode="HTML")
    await cb.answer()

# === –ó–∞–¥–∞–Ω–∏—è ===
@dp.callback_query(F.data == "tasks")
async def on_tasks(cb: types.CallbackQuery):
    with db() as conn:
        c = conn.cursor()
        c.execute("SELECT id, title, reward FROM tasks WHERE active = 1 ORDER BY id DESC")
        items = c.fetchall()

    if not items:
        await cb.message.answer("üìã –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        await cb.answer()
        return

    kb = InlineKeyboardBuilder()
    for tid, title, reward in items:
        kb.button(text=f"{title} (+{reward} TON)", callback_data=f"task_{tid}")
    kb.adjust(1)
    await cb.message.answer("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=kb.as_markup())
    await cb.answer()

@dp.callback_query(F.data.startswith("task_"))
async def on_task(cb: types.CallbackQuery):
    task_id = int(cb.data.split("_")[1])

    with db() as conn:
        c = conn.cursor()
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        c.execute("SELECT title, url, reward, active FROM tasks WHERE id = ?", (task_id,))
        t = c.fetchone()
        if not t or t[3] != 1:
            await cb.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return

        title, url, reward, _ = t

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –Ω–µ –¥–µ–ª–∞–ª –ª–∏ —É–∂–µ
        c.execute("SELECT 1 FROM task_completions WHERE user_id = ? AND task_id = ?",
                  (cb.from_user.id, task_id))
        done = c.fetchone()
        if done:
            await cb.answer("–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ", show_alert=True)
            return

        # –ù–ê –°–ï–ô–ß–ê–°: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—Ä–∞–∑—É (–ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏/–ø–µ—Ä–µ—Ö–æ–¥–∞)
        c.execute("INSERT INTO task_completions (user_id, task_id, completed_at) VALUES (?, ?, ?)",
                  (cb.from_user.id, task_id, datetime.utcnow().isoformat()))
        c.execute("UPDATE users SET balance = balance + ? WHERE id = ?", (reward, cb.from_user.id))
        conn.commit()

    text = f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{title}</b>\n" \
           f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>{reward} TON</b>"
    if url:
        text += f"\nüîó –°—Å—ã–ª–∫–∞: {url}"

    await cb.message.answer(text, parse_mode="HTML")
    await cb.answer()

# === –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ ===
@dp.callback_query(F.data == "invite")
async def on_invite(cb: types.CallbackQuery):
    link = f"https://t.me/{BOT_USERNAME}?start={cb.from_user.id}"
    with db() as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE referrer = ?", (cb.from_user.id,))
        count = c.fetchone()[0]
    await cb.message.answer(
        "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π <b>0.1 TON</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
        f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n<code>{link}</code>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}",
        parse_mode="HTML"
    )
    await cb.answer()

# === –í—ã–≤–æ–¥ (–ø–æ–∫–∞ –≤—Ä—É—á–Ω—É—é) ===
@dp.callback_query(F.data == "withdraw")
async def on_withdraw(cb: types.CallbackQuery):
    await cb.message.answer(
        "üí∏ –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ: @{ADMIN_USERNAME}"
    )
    await cb.answer()

# === –ê–¥–º–∏–Ω–∫–∞ ===
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message):
        await message.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())

@dp.callback_query(F.data == "admin_addtask_help")
async def admin_addtask_help(cb: types.CallbackQuery):
    if not is_admin(cb):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await cb.message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç:\n\n"
        "<code>/addtask –ó–∞–≥–æ–ª–æ–≤–æ–∫ | 0.2 | https://t.me/your_channel</code>\n\n"
        "‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "‚Ä¢ 0.2 ‚Äî –Ω–∞–≥—Ä–∞–¥–∞ –≤ TON\n"
        "‚Ä¢ —Å—Å—ã–ª–∫–∞ ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
        parse_mode="HTML"
    )
    await cb.answer()

@dp.message(Command("addtask"))
async def admin_addtask(message: types.Message):
    if not is_admin(message):
        await message.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    text = message.text[len("/addtask"):].strip()
    if not text:
        await message.reply("–§–æ—Ä–º–∞—Ç: /addtask –ó–∞–≥–æ–ª–æ–≤–æ–∫ | 0.2 | https://link (—Å—Å—ã–ª–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        return

    # –ø–∞—Ä—Å–∏–Ω–≥ "title | reward | url?"
    parts = [p.strip() for p in text.split("|")]
    if len(parts) < 2:
        await message.reply("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≥—Ä–∞–¥–∞. –ü—Ä–∏–º–µ—Ä: /addtask –ü–æ–¥–ø–∏—à–∏—Å—å | 0.2 | https://t.me/...")
        return

    title = parts[0]
    try:
        reward = float(parts[1].replace(",", "."))
    except ValueError:
        await message.reply("–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.2")
        return

    url = parts[2] if len(parts) >= 3 else None

    with db() as conn:
        c = conn.cursor()
        c.execute("INSERT INTO tasks (title, url, reward, active) VALUES (?, ?, ?, 1)",
                  (title, url, reward))
        conn.commit()
    await message.reply(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {title} (+{reward} TON)")

@dp.callback_query(F.data == "admin_listtasks")
async def admin_list(cb: types.CallbackQuery):
    if not is_admin(cb):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    with db() as conn:
        c = conn.cursor()
        c.execute("SELECT id, title, reward, active FROM tasks ORDER BY id DESC")
        rows = c.fetchall()
    if not rows:
        await cb.message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç.")
        await cb.answer()
        return

    text = "üìã –ó–∞–¥–∞–Ω–∏—è:\n"
    for tid, title, reward, active in rows:
        status = "‚úÖ" if active == 1 else "‚è∏"
        text += f"‚Ä¢ #{tid} {status} {title} (+{reward} TON)\n"
    await cb.message.answer(text)
    await cb.answer()

@dp.callback_query(F.data == "admin_broadcast_help")
async def admin_broadcast_help(cb: types.CallbackQuery):
    if not is_admin(cb):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await cb.message.answer(
        "–†–∞—Å—Å—ã–ª–∫–∞: –æ—Ç–ø—Ä–∞–≤—å –≤ –ª–∏—á–∫—É –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>/broadcast —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</code>",
        parse_mode="HTML"
    )
    await cb.answer()

@dp.message(Command("broadcast"))
async def admin_broadcast(message: types.Message):
    if not is_admin(message):
        await message.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    payload = message.text[len("/broadcast"):].strip()
    if not payload:
        await message.reply("–ù–∞–ø–∏—à–∏: /broadcast —Ç–µ–∫—Å—Ç")
        return

    # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with db() as conn:
        c = conn.cursor()
        c.execute("SELECT id FROM users")
        ids = [row[0] for row in c.fetchall()]

    sent, failed = 0, 0
    for uid in ids:
        try:
            await bot.send_message(uid, f"üì¢ {payload}")
            sent += 1
        except Exception:
            failed += 1
            await asyncio.sleep(0.05)

    await message.reply(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}")

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–¥–µ—Ä–∂–∏—Ç —Å–µ—Ä–≤–∏—Å –∂–∏–≤—ã–º) ===
async def handle_root(_):
    return web.Response(text="Bot is running!")

async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle_root)
    port = int(os.getenv("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

# === main ===
async def main():
    init_db()
    await start_webserver()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
