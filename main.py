import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types, F # –Ø –¥–æ–±–∞–≤–∏–ª F —Å—é–¥–∞!
from aiogram.filters import CommandStart, Command
from aiogram.types import WebAppInfo

# ==============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
# ==============================
# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –Ω–∞ Render
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME")
MY_ID = int(os.getenv("MY_ID"))
MINI_APP_URL = os.getenv("MINI_APP_URL")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not all([BOT_TOKEN, BOT_USERNAME, MY_ID, MINI_APP_URL]):
    print("‚ùå ERROR: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å sys.exit(1), —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    # import sys; sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã (–≤ Stars)
PRODUCT_PRICES = {
    "vip": 20,
    "booster": 10,
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–º–µ—Ä, –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥)
user_balances = {
    MY_ID: 1000  # –í–∞—à ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

# ==============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ==============================
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω.
    """
    user_id = message.from_user.id
    if user_id not in user_balances:
        user_balances[user_id] = 0 # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=MINI_APP_URL))]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç CryptoWorkBot.\n\n"
        f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: **{user_balances.get(user_id, 0)} Stars** ‚ú®\n\n"
        f"–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å VIP-—Å—Ç–∞—Ç—É—Å –∏–ª–∏ –ë—É—Å—Ç–µ—Ä, –ø–µ—Ä–µ–π–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
        reply_markup=markup,
        parse_mode="Markdown"
    )

@dp.message(Command("shop"))
async def cmd_shop(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop.
    –¢–∞–∫–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω.
    """
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=MINI_APP_URL))]
    ])
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:",
        reply_markup=markup
    )

@dp.message(Command("add_ton"))
async def cmd_add_ton(message: types.Message):
    """
    –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Stars –Ω–∞ –±–∞–ª–∞–Ω—Å.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å (–∞–¥–º–∏–Ω–∞).
    """
    if message.from_user.id != MY_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        args = message.text.split()
        if len(args) != 3:
            raise ValueError
        
        target_user_id = int(args[1])
        amount = int(args[2])
        
        if target_user_id not in user_balances:
            user_balances[target_user_id] = 0
            
        user_balances[target_user_id] += amount
        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} Stars –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id}."
        )
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_ton <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <—Å—É–º–º–∞>"
        )

# ==============================
# –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó WEBAPP –ò –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ö–£–ü–ö–ò
# ==============================
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    user_id = str(message.from_user.id)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–æ—à–ª–∏ –¥–æ –±–æ—Ç–∞
    print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç webapp: {message.web_app_data.data}")

    try:
        data = json.loads(message.web_app_data.data)
        
        if data["action"] == "buy":
            product = data["product"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
            price = PRODUCT_PRICES.get(product)
            if price is None:
                await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä: {product}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_balance = user_balances.get(message.from_user.id, 0)
            if current_balance >= price:
                user_balances[message.from_user.id] -= price
                await message.answer(f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ **{product.upper()}** –∑–∞ {price} Stars!\n"
                                     f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balances[message.from_user.id]} Stars ‚ú®")
            else:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ **{product.upper()}**.\n"
                                     f"–í–∞—à –±–∞–ª–∞–Ω—Å: {current_balance} Stars. –¢—Ä–µ–±—É–µ—Ç—Å—è: {price} Stars.")
    except (json.JSONDecodeError, KeyError) as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        print(f"ERROR: Invalid JSON or key in web_app_data: {e}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"ERROR: Unhandled exception in web_app_data handler: {e}")

# ==============================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê
# ==============================
async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
