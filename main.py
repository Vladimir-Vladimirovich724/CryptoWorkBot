import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web  # HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render

TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = "MenqenqmersareryBot"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
balances = {}
referrals = {}
tasks = [
    {"id": 1, "title": "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üì¢", "link": "https://t.me/example_channel", "reward": 0.2},
    {"id": 2, "title": "–ü–æ—Å–º–æ—Ç—Ä–∏ –ø–æ—Å—Ç üì∞", "link": "https://t.me/example_channel/1", "reward": 0.1}
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    kb.button(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")
    kb.button(text="üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="invite")
    kb.button(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw")
    kb.adjust(2)
    return kb.as_markup()

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    args = message.text.split()
    user_id = message.from_user.id

    if user_id not in balances:
        balances[user_id] = 0.0
        referrals[user_id] = []

    # –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
    if len(args) > 1:
        inviter_id = int(args[1])
        if inviter_id != user_id and user_id not in referrals.get(inviter_id, []):
            referrals[inviter_id].append(user_id)
            balances[inviter_id] += 0.1

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoWorkBot üíº\n\n"
        f"–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π TON!",
        reply_markup=main_menu()
    )

# –ë–∞–ª–∞–Ω—Å
@dp.callback_query(F.data == "balance")
async def balance_callback(callback: types.CallbackQuery):
    bal = balances.get(callback.from_user.id, 0.0)
    await callback.message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal:.2f} TON")
    await callback.answer()

# –ó–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data == "tasks")
async def tasks_callback(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for task in tasks:
        kb.button(text=f"{task['title']} (+{task['reward']} TON)", callback_data=f"task_{task['id']}")
    kb.adjust(1)
    await callback.message.answer("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=kb.as_markup())
    await callback.answer()

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("task_"))
async def do_task_callback(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    task = next((t for t in tasks if t["id"] == task_id), None)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    balances[callback.from_user.id] = balances.get(callback.from_user.id, 0.0) + task["reward"]
    await callback.message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {task['reward']} TON\n"
                                  f"üîó {task['link']}")
    await callback.answer()

# –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@dp.callback_query(F.data == "invite")
async def invite_callback(callback: types.CallbackQuery):
    referral_link = f"https://t.me/{BOT_USERNAME}?start={callback.from_user.id}"
    count = len(referrals.get(callback.from_user.id, []))
    await callback.message.answer(
        f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π 0.1 TON –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
        f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {count} —á–µ–ª."
    )
    await callback.answer()

# –í—ã–≤–æ–¥
@dp.callback_query(F.data == "withdraw")
async def withdraw_callback(callback: types.CallbackQuery):
    await callback.message.answer("üí∏ –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    await callback.answer()

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def handle(request):
    return web.Response(text="Bot is running!")

async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle)
    port = int(os.getenv("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

async def main():
    await start_webserver()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
