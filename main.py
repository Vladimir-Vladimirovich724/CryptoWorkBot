import os
import json
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import WebAppInfo
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# ==============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
# ==============================
# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Render
TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME")
MY_ID = int(os.getenv("MY_ID"))
MINI_APP_URL = os.getenv("MINI_APP_URL")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not all([TOKEN, BOT_USERNAME, MY_ID, MINI_APP_URL]):
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render.")
    exit(1) # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot = Bot(token=TOKEN, parse_mode=ParseMode.MARKDOWN_V2)
dp = Dispatcher()

# –¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
PRODUCT_PRICES = {
    "vip": 20.0,
    "booster": 10.0,
}
REFERRAL_PERCENT = 0.05

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "data.json"

# ==============================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• (JSON)
# ==============================
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    if os.path.exists(DB_FILE):
        with open(DB_FILE, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª data.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.")
                return {"balances": {}, "referrals": {}, "purchases": {}}
    return {
        "balances": {},
        "referrals": {},
        "purchases": {},
    }

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª."""
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=4)

# ==============================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ==============================
def main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            types.InlineKeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")
        ],
        [
            types.InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="invite"),
            types.InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=MINI_APP_URL))
        ],
        [
            types.InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥", callback_data="withdraw")
        ]
    ])

# ==============================
# –°–¢–ê–†–¢
# ==============================
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏.
    """
    user_id = str(message.from_user.id)
    args = message.text.split()
    
    data = load_data()

    if user_id not in data["balances"]:
        data["balances"][user_id] = 0.0
        data["referrals"][user_id] = []
        data["purchases"][user_id] = []

    if len(args) > 1:
        try:
            inviter_id = str(int(args[1]))
            if inviter_id != user_id and user_id not in data["referrals"].get(inviter_id, []):
                data["referrals"].setdefault(inviter_id, []).append(user_id)
        except (ValueError, TypeError):
            pass
    
    save_data(data)

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoWorkBot üíº\\n\\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: **{data['balances'].get(user_id, 0)} Stars** ‚ú®\\n\\n"
        f"–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π TON!",
        reply_markup=main_menu()
    )

# ==============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ú–ï–ù–Æ
# ==============================
@dp.callback_query(F.data == "balance")
async def balance_callback(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_data()
    user_id = str(callback.from_user.id)
    bal = data["balances"].get(user_id, 0.0)
    await callback.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal} TON", show_alert=True)

@dp.callback_query(F.data == "tasks")
async def tasks_callback(callback: types.CallbackQuery):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏—è—Ö."""
    await callback.answer("üìã –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True)

@dp.callback_query(F.data == "invite")
async def invite_callback(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö."""
    user_id = str(callback.from_user.id)
    referral_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
    data = load_data()
    count = len(data["referrals"].get(user_id, []))
    await callback.message.answer(
        f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π {REFERRAL_PERCENT*100}% –æ—Ç –∏—Ö –ø–æ–∫—É–ø–æ–∫!\\n\\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\\n{referral_link}\\n\\n"
        f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {count} —á–µ–ª."
    )
    await callback.answer()

@dp.callback_query(F.data == "withdraw")
async def withdraw_callback(callback: types.CallbackQuery):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤."""
    await callback.answer("üí∏ –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)

# ==============================
# –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó WEBAPP –ò –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ö–£–ü–ö–ò
# ==============================
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    user_id = str(message.from_user.id)
    db_data = load_data()
    
    print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {message.web_app_data.data}")

    try:
        data_from_app = json.loads(message.web_app_data.data)
        
        if data_from_app["action"] == "buy":
            product = data_from_app["product"]
            price = PRODUCT_PRICES.get(product)
            
            if not price:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")
                return

            user_balance = db_data["balances"].get(user_id, 0.0)

            if user_balance >= price:
                db_data["balances"][user_id] -= price
                db_data["purchases"].setdefault(user_id, []).append(product)
                
                for inviter_id, invited_users in db_data["referrals"].items():
                    if user_id in invited_users:
                        referral_bonus = price * REFERRAL_PERCENT
                        db_data["balances"].setdefault(inviter_id, 0.0)
                        db_data["balances"][inviter_id] += referral_bonus
                        try:
                            await bot.send_message(
                                int(inviter_id),
                                f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∫—É–ø–∏–ª {product}! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {referral_bonus} TON."
                            )
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—É {inviter_id}: {e}")

                await message.answer(f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ {product} –∑–∞ {price} Stars.\\n"
                                     f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {db_data['balances'][user_id]} Stars ‚ú®")
            else:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {product}.\\n"
                                     f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} Stars. –¢—Ä–µ–±—É–µ—Ç—Å—è: {price} Stars.")
    except (json.JSONDecodeError, KeyError) as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        print(f"–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π JSON –∏–ª–∏ –∫–ª—é—á –≤ web_app_data: {e}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ web_app_data: {e}")
    finally:
        save_data(db_data)

# ==============================
# –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
# ==============================
@dp.message(Command("add_ton"))
async def add_ton_to_balance(message: types.Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.from_user.id != MY_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        args = message.text.split()
        if len(args) != 3:
            raise ValueError
        
        target_user_id = str(int(args[1]))
        amount = float(args[2])
        
        db_data = load_data()
        db_data["balances"].setdefault(target_user_id, 0.0)
        db_data["balances"][target_user_id] += amount
        save_data(db_data)
        
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} TON.")
        try:
            await bot.send_message(int(target_user_id), f"üéâ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} TON!")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_ton <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <—Å—É–º–º–∞>")


# ==============================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ü–£–°–ö–ê
# ==============================
async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Webhook.
    """
    # –ü–æ–ª—É—á–∞–µ–º URL –∏ –ø–æ—Ä—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ Render
    render_url = os.getenv("RENDER_EXTERNAL_URL")
    if not render_url:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å RENDER_EXTERNAL_URL. –ó–∞–ø—É—Å–∫ Webhook –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return
        
    port = int(os.environ.get("PORT", 8000))
    webhook_url = f"{render_url}webhook"

    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π Webhook URL: {webhook_url}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        print("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π Webhook...")
        await bot.delete_webhook()
        print("‚úÖ –°—Ç–∞—Ä—ã–π Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π Webhook: {e}")

    try:
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ Webhook...")
        await bot.set_webhook(webhook_url)
        print("‚úÖ –ù–æ–≤—ã–π Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook. {e}")
        return

    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_requests_handler.register(app, "/webhook")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    setup_application(app, dp, bot=bot)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    await site.start()

if __name__ == "__main__":
    asyncio.run(main())
