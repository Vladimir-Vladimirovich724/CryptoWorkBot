import logging
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo
)
import asyncio
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏–∑ Render (Environment Variables)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞"
users = {}
purchases = {}

# ---------- –ö–ù–û–ü–ö–ò ----------
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")],
        [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://cryptoworkbot-shop.onrender.com"))]
    ],
    resize_keyboard=True
)

# ---------- –°–¢–ê–†–¢ ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"balance": 0, "refs": []}
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CryptoWorkBot*!\n\n"
        "–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏ —Ç—Ä–∞—Ç—å ‚≠êÔ∏è Stars.",
        reply_markup=main_kb,
        parse_mode="Markdown"
    )

# ---------- –ë–ê–õ–ê–ù–° ----------
@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def check_balance(message: types.Message):
    user_id = message.from_user.id
    balance = users.get(user_id, {}).get("balance", 0)
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} Stars")

# ---------- –†–ï–§–ï–†–ê–õ–´ ----------
@dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def check_refs(message: types.Message):
    user_id = message.from_user.id
    refs = users.get(user_id, {}).get("refs", [])
    await message.answer(
        f"üë• –£ –≤–∞—Å {len(refs)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/{(await bot.get_me()).username}?start={user_id}"
    )

# ---------- –ú–ê–ì–ê–ó–ò–ù ----------
@dp.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def open_shop(message: types.Message):
    await message.answer(
        "üõí –û—Ç–∫—Ä—ã–≤–∞–π –º–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–∫—É–ø–∞–π —Ç–æ–≤–∞—Ä—ã –∑–∞ ‚≠ê Stars!",
        reply_markup=main_kb
    )

# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö WebApp ----------
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp: {data}")

        if data.get("action") == "buy":
            product = data.get("product")
            user_id = message.from_user.id

            if product == "vip":
                purchases.setdefault(user_id, []).append("vip")
                await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º
